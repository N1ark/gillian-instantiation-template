(* Product (IDs) (Exclusive) (Fractional) *)

spec test_left_load()
  [[ <left_ex>(;#x) * <right_frac>(1;#y) ]]
  [[ (ret == {{ #x }}) * <left_ex>(;#x) * <right_frac>(1;#y) ]]
  normal
proc test_left_load() {
  x := [left_load]();
  ret := x;
  return
};


spec test_left_store(x)
  [[ (x == #x) * <left_ex>(;#any) * <right_frac>(1;#y) ]]
  [[ (ret == null) * <left_ex>(;#x) * <right_frac>(1;#y) ]]
  normal
proc test_left_store(x) {
  x := [left_store](x);
  ret := null;
  return
};

spec test_right_load()
  [[ <right_frac>(1;#x) * <left_ex>(;#y) ]]
  [[ (ret == {{ #x }}) * <right_frac>(1;#x) * <left_ex>(;#y) ]]
  normal
proc test_right_load() {
  x := [right_load]();
  ret := x;
  return
};

spec test_right_store(x)
  [[ (x == #x) * <right_frac>(1;#any) * <left_ex>(;#y) ]]
  [[ (ret == null) * <right_frac>(1;#x) * <left_ex>(;#y) ]]
  normal
proc test_right_store(x) {
  x := [right_store](x);
  ret := null;
  return
};


spec test_right_invalid_store(x)
  [[ (x == #x) * <right_frac>(0.5;#any) * <left_ex>(;#y) ]]
  [[ (ret == null) * <right_frac>(0.5;#any) * <left_ex>(;#y) ]]
  normal
proc test_right_invalid_store(x) {
  x := [right_store](x);
  ret := null;
  return
};
