(* PMap (StringIndex) (Exclusive) *)

spec test_store(x)
  [[ (x == #x) * <points_to>("field";#any) ]]
  [[ (ret == null) * <points_to>("field";#x) ]]
  normal
proc test_store(x) {
  e := [store]("field", x);
  ret := null;
  return
};

spec test_store_domainset(x)
  [[ (x == #x) * <points_to>("field";#any) * <domainset>(;-{"field"}-) ]]
  [[ (ret == null) * <domainset>(;-{"field"}-) * <points_to>("field";#x) ]]
  normal
proc test_store_domainset(x) {
  e := [store]("field", x);
  ret := null;
  return
};

spec test_store_missing(x)
  [[ (x == #x) ]]
  [[ (ret == null) * <points_to>("field";#x) ]]
  normal
proc test_store_missing(x) {
  e := [store]("field", x);
  ret := null;
  return
};

spec test_store_missing_with_domainset(x)
  [[ (x == #x) * <domainset>(;-{"other"}-) ]]
  [[ (ret == null) * <points_to>("field";#x) * <domainset>(;-{"other", "field"}-) ]]
  normal
proc test_store_missing_with_domainset(x) {
  e := [store]("field", x);
  ret := null;
  return
};

spec test_invalid_store(x)
  [[ (x == #x) * <domainset>(;-{"field"}-) ]]
  [[ (ret == null) ]]
  normal
proc test_invalid_store(x) {
  e := [store]("field", x);
  ret := null;
  return
};

spec test_load()
  [[ (<points_to>("field";#any)) ]]
  [[ (ret == {{ #any }}) * <points_to>("field";#any) ]]
  normal
proc test_load() {
  x := [load]("field");
  ret := x;
  return
};


spec test_load_when_missing_with_domainset()
  [[ <domainset>(;-{"other"}-) ]]
  [[ (ret == {{ 0i }}) * <points_to>("field";0i) * <domainset>(;-{"other", "field"}-) ]]
  normal
proc test_load_when_missing_with_domainset() {
  x := [load]("field");
  ret := x;
  return
};

spec test_load_when_missing()
  [[ emp ]]
  [[ (ret == {{ 0i }}) * <points_to>("field";0i) ]]
  normal
proc test_load_when_missing() {
  x := [load]("field");
  ret := x;
  return
};

spec test_invalid_load()
  [[ <domainset>(;-{"field"}-) ]]
  [[ (ret == {{ 0i }}) * <domainset>(;-{"field"}-) ]]
  normal
proc test_invalid_load() {
  x := [load]("field");
  ret := x;
  return
};

spec test_invalid_alloc()
  [[ <domainset>(;-{"other"}-) ]]
  [[ (ret == {{}}) * <domainset>(;-{"other"}-) ]]
  normal
proc test_invalid_alloc() {
  e := [alloc]("field");
  ret := e;
  return
};
