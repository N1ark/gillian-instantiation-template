(* Tests for MList(Freeable(Exc)) *)

spec test_invalid_store_after_free(x)
  [[ (x == #x) * <length>(;1i) * <points_to>(0i;#any) ]]
  [[ (ret == null) * <length>(;1i) * <points_to>(0i;#any) ]]
  normal
proc test_invalid_store_after_free(x) {
  e := [free](0i);
  e := [store](0i, x);
  ret := null;
  return
};

spec test_valid_store_unfreed_index(x)
  [[ (x == #x) * <length>(;2i) * <freed>(0i;) * <points_to>(1i;#any) ]]
  [[ (ret == null) * <length>(;2i) * <freed>(0i;) * <points_to>(1i;#x) ]]
  normal
proc test_valid_store_unfreed_index(x) {
  e := [store](1i, x);
  ret := null;
  return
};


spec test_invalid_store_freed_index(x)
  [[ (x == #x) * <length>(;2i) * <freed>(0i;) * <points_to>(1i;#any) ]]
  [[ (ret == null) * <length>(;2i) * <freed>(0i;) * <points_to>(1i;#x) ]]
  normal
proc test_invalid_store_freed_index(x) {
  e := [store](0i, x);
  ret := null;
  return
};

spec test_free_indices()
  [[ <length>(;2i) *  <points_to>(0i;#any) * <points_to>(1i;#any) ]]
  [[ (ret == null) * <length>(;2i) * <freed>(0i;) * <freed>(1i;) ]]
  normal
proc test_free_indices() {
  e := [free](0i);
  e := [free](1i);
  ret := null;
  return
};

spec test_invalid_free_unowned_index()
  [[ <length>(;1i) ]]
  [[ (ret == null) * <length>(;1i) ]]
  normal
proc test_invalid_free_unowned_index() {
  e := [free](0i);
  ret := null;
  return
};

spec test_invalid_free_out_of_bounds()
  [[ <length>(;1i) * <points_to>(0i;#any) ]]
  [[ (ret == null) * <length>(;1i) * <points_to>(0i;#any) ]]
  normal
proc test_invalid_free_out_of_bounds() {
  e := [free](1i);
  ret := null;
  return
};


(* Below: "inherited" tests from MList(Exc)
   They should behave the exact same. *)

spec test_store(x)
  [[ (x == #x) * <length>(;1i) * <points_to>(0i;#any) ]]
  [[ (ret == null) * <length>(;1i) * <points_to>(0i;#x) ]]
  normal
proc test_store(x) {
  e := [store](0i, x);
  ret := null;
  return
};

spec test_store_no_length(x)
  [[ (x == #x) * <points_to>(11i;#b) ]]
  [[ (ret == null) * <points_to>(11i;#x) ]]
  normal
proc test_store_no_length(x) {
  e := [store](11i, x);
  ret := null;
  return
};

spec test_invalid_out_of_bound_store(x)
  [[ (x == #x) * <length>(;1i) * <points_to>(0i;#any) ]]
  [[ (ret == null) * <length>(;1i) * <points_to>(0i;#any) ]]
  normal
proc test_invalid_out_of_bound_store(x) {
  e := [store](1i, x);
  ret := null;
  return
};

spec test_invalid_store_missing_resource(x)
  [[ (x == #x) * <length>(;1i) ]]
  [[ (ret == null) ]]
  normal
proc test_invalid_store_missing_resource(x) {
  e := [store](0i, x);
  ret := null;
  return
};

spec test_load()
  [[ <points_to>(0i;#any) * <length>(;1i) ]]
  [[ (ret == {{ #any }}) * <points_to>(0i;#any) * <length>(;1i) ]]
  normal
proc test_load() {
  x := [load](0i);
  ret := x;
  return
};

spec test_invalid_out_of_bound_load()
  [[ <points_to>(0i;#any) * <length>(;1i) ]]
  [[ (ret == null) * <points_to>(0i;#any) * <length>(;1i) ]]
  normal
proc test_invalid_out_of_bound_load() {
  x := [load](2i);
  ret := x;
  return
};
