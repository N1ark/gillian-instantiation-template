(* Tests for PMap(StringIndex, Freeable(MList(Exc))) *)

spec test_store(x)
  [[ (x == #x) * <points_to>("field",0i;#any) ]]
  [[ (ret == null) * <points_to>("field",0i;#x) ]]
  normal
proc test_store(x) {
  e := [store]("field", 0i, x);
  ret := null;
  return
};

spec test_store_domainset(x)
  [[ (x == #x) * <points_to>("field",0i;#any) * <domainset>(;-{"field"}-) ]]
  [[ (ret == null) * <domainset>(;-{"field"}-) * <points_to>("field",0i;#x) ]]
  normal
proc test_store_domainset(x) {
  e := [store]("field", 0i, x);
  ret := null;
  return
};


spec test_store_domainset_and_length(x)
  [[ (x == #x) * <points_to>("field",0i;#any) * <domainset>(;-{"field"}-) * <length>("field";1i) ]]
  [[ (ret == null) * <domainset>(;-{"field"}-) * <points_to>("field",0i;#x) * <length>("field";1i) ]]
  normal
proc test_store_domainset_and_length(x) {
  e := [store]("field", 0i, x);
  ret := null;
  return
};


spec test_invalid_store(x)
  [[ (x == #x) ]]
  [[ (ret == null) ]]
  normal
proc test_invalid_store(x) {
  e := [store]("field", 0i, x);
  ret := null;
  return
};

spec test_load()
  [[ (<points_to>("field",0i;#any)) ]]
  [[ (ret == {{ #any }}) * <points_to>("field",0i;#any) ]]
  normal
proc test_load() {
  x := [load]("field", 0i);
  ret := x;
  return
};

spec test_invalid_load()
  [[ True ]]
  [[ (ret == {{ #any }}) ]]
  normal
proc test_invalid_load() {
  x := [load]("field", 0i);
  ret := x;
  return
};

spec test_alloc_no_domainset()
  [[ True ]]
  [[ (ret == {{"field"}}) * <length>("field";2i)
    * <points_to>("field",0i;0i) * <points_to>("field",1i;0i) ]]
  normal
proc test_alloc_no_domainset() {
  e := [alloc]("field", 2i);
  ret := e;
  return
};

spec test_alloc_domainset()
  [[ <domainset>(;-{"other"}-) ]]
  [[ (ret == {{"field"}}) * <length>("field";2i) * <domainset>(;-{"other", "field"}-)
    * <points_to>("field",0i;0i) * <points_to>("field",1i;0i) ]]
  normal
proc test_alloc_domainset() {
  e := [alloc]("field", 2i);
  ret := e;
  return
};

spec test_complete()
  [[ <domainset>(;-{}-) ]]
  [[ (ret == {{"a"}})
    * <domainset>(;-{"a", "b"}-)
    * <length>("a";4i)
    * <points_to>("a",0i;1.0) * <points_to>("a",1i;2.0)
    * <points_to>("a",2i;4.0) * <points_to>("a",3i;8.0)
    * <freed>("b";) ]]
  normal
proc test_complete() {
  a := [alloc]("a", 4i);
  e := [store]("a", 0i, 1.0);
  e := [store]("a", 1i, 2.0);
  e := [store]("a", 2i, 4.0);
  e := [store]("a", 3i, 8.0);
  e := [alloc]("b", 8i);
  e := [free]("b");
  ret := a;
  return
};
